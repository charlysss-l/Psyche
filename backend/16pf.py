# step 1: user will upload an image and store it in firebase with a URL file name (OMRCamera.tsx)
# step 2: user will send a request to the backend to process the image (OMRCamera.tsx)
# step 3: backend will download the URL image and process it (app.py)
# step 4: backend will return the score to the localhost named http://127.0.0.1:5000/process_omr (app.py)
# step 5: frontend will fetch the score from the same localhost (OMRCamera.tsx)
# step 6: frontend will display the score (OMRCamera.tsx)



from io import BytesIO
import requests
import cv2
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

def detect_and_crop_sheet(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply Gaussian blur and edge detection
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 75, 200)
    
    # Find contours
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Find the largest contour which should be the outline of the sheet
    contours = sorted(contours, key=cv2.contourArea, reverse=True)[:5]
    sheet_contour = None
    for contour in contours:
        # Approximate the contour to get a 4-point boundary
        epsilon = 0.02 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        if len(approx) == 4:
            sheet_contour = approx
            break
    
    if sheet_contour is None:
        raise ValueError("Unable to detect answer sheet boundaries.")
    
    # Get a top-down view of the sheet by applying a perspective transform
    pts = sheet_contour.reshape(4, 2)
    rect = np.zeros((4, 2), dtype="float32")
    
    # Order points: top-left, top-right, bottom-right, bottom-left
    s = pts.sum(axis=1)
    rect[0] = pts[np.argmin(s)]
    rect[2] = pts[np.argmax(s)]
    
    diff = np.diff(pts, axis=1)
    rect[1] = pts[np.argmin(diff)]
    rect[3] = pts[np.argmax(diff)]
    
    (tl, tr, br, bl) = rect
    widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth = max(int(widthA), int(widthB))
    
    heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight = max(int(heightA), int(heightB))
    
    dst = np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype="float32")
    
    # Perform the perspective transform to get a cropped and aligned sheet
    M = cv2.getPerspectiveTransform(rect, dst)
    warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))
    
    return warped


def omr_processing(image):

    image = detect_and_crop_sheet(image)
    
    # Resize cropped image to match the expected sheet dimensions
    image = cv2.resize(image, (1000, 1400))
    
    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply binary threshold to make the paper white and answers black
    _, thresh = cv2.threshold(gray, 150, 255, cv2.THRESH_BINARY_INV)


    # Define the grid positions for the answer bubbles
    answer_bubbles = {
        1: [(99, 131), (133, 131), (167, 131)], 
        2: [(99, 163), (133, 163), (167, 163)],
        3: [(99, 195), (133, 195), (167, 195)],
        4: [(99, 227), (133, 227), (167, 227)],
        5: [(99, 260), (133, 260), (167, 260)],
        6: [(99, 292), (133, 292), (167, 292)],
        7: [(99, 324), (133, 324), (167, 324)],
        8: [(99, 356), (133, 356), (167, 356)],
        9: [(99, 388), (133, 388), (167, 388)],
        10: [(99, 421), (133, 421), (167, 421)],
        11: [(99, 453), (133, 453), (167, 453)],
        12: [(99, 485), (133, 485), (167, 485)],
        13: [(99, 518), (133, 518), (167, 518)],
        14: [(99, 550), (133, 550), (167, 550)],
        15: [(99, 582), (133, 582), (167, 582)],
        16: [(99, 614), (133, 614), (167, 614)],
        17: [(99, 647), (133, 647), (167, 647)],
        18: [(99, 679), (133, 679), (167, 679)],
        19: [(99, 711), (133, 711), (167, 711)],
        20: [(99, 744), (133, 744), (167, 744)],
        21: [(99, 777), (133, 777), (167, 777)],
        22: [(99, 808), (133, 808), (167, 808)],
        23: [(99, 840), (133, 840), (167, 840)],
        24: [(99, 873), (133, 873), (167, 873)],
        25: [(99, 905), (133, 905), (167, 905)],
        26: [(99, 937), (133, 937), (167, 937)],
        27: [(99, 969), (133, 969), (167, 969)],
        28: [(99, 1002), (133, 1002), (167, 1002)],
        29: [(99, 1034), (133, 1034), (167, 1034)],
        30: [(99, 1067), (133, 1067), (167, 1067)],
        31: [(99, 1099), (133, 1099), (167, 1099)],
        32: [(99, 1131), (133, 1131), (167, 1131)],
        33: [(99, 1164), (133, 1164), (167, 1164)],
        34: [(99, 1196), (133, 1196), (167, 1196)],
        35: [(99, 1228), (133, 1228), (167, 1228)],
        36: [(99, 1260), (133, 1260), (167, 1260)],
        37: [(99, 1292), (133, 1292), (167, 1292)],

        38: [(281, 131) , (315, 131), (349, 131)],
        39: [(281, 163) , (315, 163), (349, 163)],
        40: [(281, 196) , (315, 196), (349, 196)],
        41: [(281, 228) , (315, 228), (349, 228)],
        42: [(281, 260) , (315, 260), (349, 260)],
        43: [(281, 292) , (315, 292), (349, 292)],
        44: [(281, 324) , (315, 324), (349, 324)],
        45: [(281, 357) , (315, 357), (349, 357)],
        46: [(281, 388) , (315, 388), (349, 388)],
        47: [(281, 421) , (315, 421), (349, 421)],
        48: [(281, 453) , (315, 453), (349, 453)],
        49: [(281, 485) , (315, 485), (349, 485)],
        50: [(281, 518) , (315, 518), (349, 518)],
        51: [(281, 550) , (315, 550), (349, 550)],
        52: [(281, 582) , (315, 582), (349, 582)],
        53: [(281, 615) , (315, 615), (349, 615)],
        54: [(281, 647) , (315, 647), (349, 647)],
        55: [(281, 679) , (315, 679), (349, 679)],
        56: [(281, 712) , (315, 712), (349, 712)],
        57: [(281, 744) , (315, 744), (349, 744)],
        58: [(281, 776) , (315, 776), (349, 776)],
        59: [(281, 808) , (315, 808), (349, 808)],
        60: [(281, 841) , (315, 841), (349, 841)],
        61: [(281, 873) , (315, 873), (349, 873)],
        62: [(281, 905) , (315, 905), (349, 905)],
        63: [(281, 937) , (315, 937), (349, 937)],
        64: [(281, 970) , (315, 970), (349, 970)],
        65: [(281, 1002), (315, 1002), (349, 1002) ],
        66: [(281, 1034) , (315, 1034), (349, 1034)],
        67: [(281, 1066), (315, 1066), (349, 1066) ],
        68: [(281, 1099) , (315, 1099), (349, 1099)],
        69: [(281, 1131) , (315, 1131), (349, 1131)],
        70: [(281, 1164) , (315, 1164), (349, 1164)],
        71: [(281, 1196) , (315, 1196), (349, 1196)],
        72: [(281, 1228) , (315, 1228), (349, 1228)],
        73: [(281, 1260) , (315, 1260), (349, 1260)],
        74: [(281, 1292) , (315, 1292), (349, 1292)],

        75: [(463, 130) ,(497, 130),(531, 130)],
        76: [(463, 163) ,(497, 163),(531, 163)],
        77: [(463, 195) ,(497, 195),(531, 195)],
        78: [(463, 227) ,(497, 227),(531, 227)],
        79: [(463, 260) ,(497, 260),(531, 260)],
        80: [(463, 292) ,(497, 292),(531, 292)],
        81: [(463, 324) ,(497, 325),(531, 324)],
        82: [(463, 356) ,(497, 356),(531, 356)],
        83: [(463, 390) ,(497, 390),(531, 390)],
        84: [(463, 421) ,(497, 421),(531, 421)],
        85: [(463, 453) ,(497, 453),(531, 453)],
        86: [(463, 486) ,(497, 486),(531, 486)],
        87: [(463, 518) ,(497, 518),(531, 518)],
        88: [(463, 550) ,(497, 550),(531, 550)],
        89: [(463, 582) ,(497, 582),(531, 582)],
        90: [(463, 615) ,(497, 615),(531, 615)],
        91: [(463, 647) ,(497, 647),(531, 647)],
        92: [(463, 679) ,(497, 679),(531, 679)],
        93: [(463, 712) ,(497, 712),(531, 712)],
        94: [(463, 744) ,(497, 744),(531, 744)],
        95: [(463, 776) ,(497, 776),(531, 776)],
        96: [(463, 808) ,(497, 808),(531, 808)],
        97: [(463, 841) ,(497, 841),(531, 841)],
        98: [(463, 873) ,(497, 873),(531, 873)],
        99: [(463, 904) ,(497, 904),(531, 904)],
        100: [(463, 937) ,(497, 937),(531, 937)],
        101: [(463, 970) ,(497, 970),(531, 970)],
        102: [(463, 1002) ,(497, 1002),(531, 1002)],
        103: [(463, 1034) ,(497, 1034),(531, 1034)],
        104: [(463, 1067) ,(497, 1067),(531, 1067)],
        105: [(463, 1099) ,(497, 1099),(531, 1099)],
        106: [(463, 1131) ,(497, 1131),(531, 1131)],
        107: [(463, 1163) ,(497, 1163),(531, 1163)],
        108: [(463, 1196) ,(497, 1196),(531, 1196)],
        109: [(463, 1228) ,(497, 1228),(531, 1228)],
        110: [(463, 1260) ,(497, 1260),(531, 1260)],
        111: [(463, 1292) ,(497, 1292),(531, 1292)],

        112: [(645, 131), (679, 131), (713, 131) ],
        113: [(645, 163), (679, 163), (713, 163) ],
        114: [(645, 195), (679, 195), (713, 195) ],
        115: [(645, 227), (679, 227), (713, 227) ],
        116: [(645, 260), (679, 260), (713, 260) ],
        117: [(645, 292), (679, 292), (713, 292) ],
        118: [(645, 324), (679, 324), (713, 324) ],
        119: [(645, 356), (679, 356), (713, 356) ],
        120: [(645, 389), (679, 389), (713, 389) ],
        121: [(645, 421), (679, 421), (713, 421) ],
        122: [(645, 453), (679, 453), (713, 453) ],
        123: [(645, 486), (679, 486), (713, 486) ],
        124: [(645, 518), (679, 518), (713, 518) ],
        125: [(645, 550), (679, 550), (713, 550) ],
        126: [(645, 583), (679, 583), (713, 583) ],
        127: [(645, 615), (679, 615), (713, 615) ],
        128: [(645, 647), (679, 647), (713, 647) ],
        129: [(645, 679), (679, 679), (713, 679) ],
        130: [(645, 711), (679, 711), (713, 711) ],
        131: [(645, 744), (679, 744), (713, 744) ],
        132: [(645, 776), (679, 776), (713, 776) ],
        133: [(645, 808), (679, 808), (713, 808) ],
        134: [(645, 840), (679, 840), (713, 840) ],
        135: [(645, 873), (679, 873), (713, 873) ],
        136: [(645, 905), (679, 905), (713, 905) ],
        137: [(645, 937), (679, 937), (713, 937) ],
        138: [(645, 969), (679, 969), (713, 969) ],
        139: [(645, 1002), (679, 1002), (713, 1002) ],
        140: [(645, 1034), (679, 1034), (713, 1034) ],
        141: [(645, 1066), (679, 1066), (713, 1066) ],
        142: [(645, 1099), (679, 1099), (713, 1099) ],
        143: [(645, 1131), (679, 1131), (713, 1131) ],
        144: [(645, 1163), (679, 1163), (713, 1163) ],
        145: [(645, 1196), (679, 1196), (713, 1196) ],
        146: [(645, 1228), (679, 1228), (713, 1228) ],
        147: [(645, 1260), (679, 1260), (713, 1260) ],
        148: [(645, 1292), (679, 1292), (713, 1292) ],

        149: [(827, 131) , (861, 131), (895, 131)],
        150: [(827, 163) , (861, 163), (895, 163)],
        151: [(827, 195) , (861, 195), (895, 195) ],
        152: [(827, 228) , (861, 228), (895, 228) ],
        153: [(827, 259) , (861, 259), (895, 259) ],
        154: [(827, 292) , (861, 292), (895, 292) ],
        155: [(827, 324) , (861, 324), (895, 324) ],
        156: [(827, 357) , (861, 357), (895, 357) ],
        157: [(827, 389) , (861, 389), (895, 389) ],
        158: [(827, 421) , (861, 421), (895, 421) ],
        159: [(827, 453) , (861, 453), (895, 453) ],
        160: [(827, 485) , (861, 485), (895, 485) ],
        161: [(827, 518) , (861, 518), (895, 518) ],
        162: [(827, 550) , (861, 550), (895, 550) ],
        163: [(827, 582) , (861, 582), (895, 582) ],
        164: [(827, 614) , (861, 614), (895, 614) ],
        165: [(827, 647) , (861, 647), (895, 647) ],
        166: [(827, 679) , (861, 679), (895, 679) ],
        167: [(827, 711) , (861, 711), (895, 711) ],
        168: [(827, 743) , (861, 743), (895, 743) ],
        169: [(827, 776) , (861, 776), (895, 776) ],
        170: [(827, 808) , (861, 808), (895, 808) ],
        171: [(827, 840) , (861, 840), (895, 840) ],
        172: [(827, 873) , (861, 873), (895, 873) ],
        173: [(827, 905) , (861, 905), (895, 905) ],
        174: [(827, 937) , (861, 937), (895, 937) ],
        175: [(827, 969) , (861, 969), (895, 969) ],
        176: [(827, 1002) , (861, 1002), (895, 1002) ],
        177: [(827, 1034) , (861, 1034), (895, 1034) ],
        178: [(827, 1066) , (861, 1066), (895, 1066) ],
        179: [(827, 1098) , (861, 1098), (895, 1098) ],
        180: [(827, 1130) , (861, 1130), (895, 1130) ],
        181: [(827, 1163) , (861, 1163), (895, 1163) ],
        182: [(827, 1195) , (861, 1195), (895, 1195) ],
        183: [(827, 1228) , (861, 1228), (895, 1228) ],
        184: [(827, 1260) , (861, 1260), (895, 1260) ],
        185: [(827, 1292) , (861, 1292), (895, 1292) ],  
       
    }

    # Correct answer key
    answer_key = {1: {'A':1, 'B':2, 'C':1}, 2: {'A':2, 'B':1, 'C':2}, 3: {'A': 1, 'B': 2, 'C': 1}, 4: {'A':2, 'B':1, 'C':2}, 5: {'A':1, 'B':2, 'C':1}, 6: {'A':2, 'B':1, 'C':2}, 7: {'A':1, 'B':2, 'C':1}, 8: {'A':2, 'B':1, 'C':2},
    9: {'A':1, 'B':2, 'C':1}, 10: {'A':2, 'B':1, 'C':2}, 11: {'A':1, 'B':2, 'C':1}, 12: {'A':2, 'B':1, 'C':2}, 13: {'A':1, 'B':2, 'C':1}, 14: {'A':2, 'B':1, 'C':2}, 15: {'A':1, 'B':2, 'C':1}, 16: {'A':2, 'B':1, 'C':2},
    17: {'A':1, 'B':2, 'C':1}, 18: {'A':2, 'B':1, 'C':2}, 19: {'A':1, 'B':2, 'C':1}, 20: {'A':2, 'B':1, 'C':2}, 21: {'A':1, 'B':2, 'C':1}, 22: {'A':2, 'B':1, 'C':2}, 23: {'A':1, 'B':2, 'C':1}, 24: {'A':2, 'B':1, 'C':2},
    25: {'A':1, 'B':2, 'C':1}, 26: {'A':2, 'B':1, 'C':2}, 27: {'A':1, 'B':2, 'C':1}, 28: {'A':2, 'B':1, 'C':2}, 29: {'A':1, 'B':2, 'C':1}, 30: {'A':2, 'B':1, 'C':2}, 31: {'A':1, 'B':2, 'C':1}, 32: {'A':2, 'B':1, 'C':2},
    33: {'A':1, 'B':2, 'C':1}, 34: {'A':2, 'B':1, 'C':2}, 35: {'A':1, 'B':2, 'C':1}, 36: {'A':2, 'B':1, 'C':2}, 37: {'A':1, 'B':2, 'C':1}, 38: {'A':0, 'B':1, 'C':2}, 39: {'A':2, 'B':1, 'C':0}, 40: {'A':2, 'B':1, 'C':0},
    41: {'A':0, 'B':1, 'C':2}, 42: {'A':2, 'B':1, 'C':0}, 43: {'A':2, 'B':1, 'C':0}, 44: {'A':2, 'B':1, 'C':0}, 45: {'A':0, 'B':1, 'C':2}, 46: {'A':0, 'B':1, 'C':2}, 47: {'A':2, 'B':1, 'C':0}, 48: {'A':0, 'B':1, 'C':2},
    49: {'A':0, 'B':1, 'C':2}, 50: {'A':2, 'B':1, 'C':0}, 51: {'A':2, 'B':1, 'C':0}, 52: {'A':0, 'B':1, 'C':2}, 53: {'A':2, 'B':1, 'C':0}, 54: {'A':2, 'B':1, 'C':0}, 55: {'A':0, 'B':1, 'C':2}, 56: {'A':0, 'B':1, 'C':2},
    57: {'A':0, 'B':1, 'C':2}, 58: {'A':0, 'B':1, 'C':2}, 59: {'A':2, 'B':1, 'C':0}, 60: {'A':0, 'B':1, 'C':2}, 61: {'A':2, 'B':1, 'C':0}, 62: {'A':2, 'B':1, 'C':0}, 63: {'A':0, 'B':1, 'C':2}, 64: {'A':2, 'B':1, 'C':0},
    65: {'A':0, 'B':1, 'C':2}, 66: {'A':2, 'B':1, 'C':0}, 67: {'A':0, 'B':1, 'C':2}, 68: {'A':2, 'B':1, 'C':0}, 69: {'A':2, 'B':1, 'C':0}, 70: {'A':0, 'B':1, 'C':2}, 71: {'A':0, 'B':1, 'C':2}, 72:{'A':0, 'B':1, 'C':2},
    73: {'A':2, 'B':1, 'C':0}, 74: {'A':2, 'B':1, 'C':0}, 75: {'A':0, 'B':1, 'C':2}, 76: {'A':2, 'B':1, 'C':0}, 77: {'A':2, 'B':1, 'C':0}, 78: {'A':0, 'B':1, 'C':2}, 79: {'A':2, 'B':1, 'C':0}, 80: {'A':2, 'B':1, 'C':0},
    81: {'A':0, 'B':1, 'C':2}, 82: {'A':0, 'B':1, 'C':2}, 83: {'A':2, 'B':1, 'C':0}, 84: {'A':0, 'B':1, 'C':2}, 85: {'A':0, 'B':1, 'C':2}, 86: {'A':0, 'B':1, 'C':2}, 87: {'A':2, 'B':1, 'C':0}, 88: {'A':2, 'B':1, 'C':0},
    89: {'A':2, 'B':1, 'C':0}, 90: {'A':0, 'B':1, 'C':2}, 91: {'A':0, 'B':1, 'C':2}, 92: {'A':0, 'B':1, 'C':2}, 93: {'A':2, 'B':1, 'C':0}, 94: {'A':0, 'B':1, 'C':2}, 95: {'A':0, 'B':1, 'C':2}, 96:{'A':2, 'B':1, 'C':0},
    97: {'A':2, 'B':1, 'C':0}, 98: {'A':0, 'B':1, 'C':2}, 99: {'A':2, 'B':1, 'C':0}, 100: {'A':2, 'B':1, 'C':0}, 101: {'A':0, 'B':1, 'C':2}, 102: {'A':0, 'B':1, 'C':2}, 103: {'A':2, 'B':1, 'C':0}, 104: {'A':2, 'B':1, 'C':0},
    105: {'A':0, 'B':1, 'C':2}, 106: {'A':0, 'B':1, 'C':2}, 107: {'A':0, 'B':1, 'C':2}, 108: {'A':2, 'B':1, 'C':0}, 109: {'A':0, 'B':1, 'C':2}, 110: {'A':0, 'B':1, 'C':2}, 111:{'A':2, 'B':1, 'C':0}, 112: {'A':2, 'B':1, 'C':0},
     113: {'A':2, 'B':1, 'C':0}, 114: {'A':0, 'B':1, 'C':2}, 115: {'A':0, 'B':1, 'C':2}, 116: {'A':2, 'B':1, 'C':0},
    117: {'A':0, 'B':1, 'C':2}, 118: {'A':2, 'B':1, 'C':0}, 119: {'A':0, 'B':1, 'C':2}, 120: {'A':2, 'B':1, 'C':0},
    121: {'A':2, 'B':1, 'C':0}, 122: {'A':0, 'B':1, 'C':2}, 123: {'A':0, 'B':1, 'C':2}, 124: {'A':0, 'B':1, 'C':2},
    125: {'A':2, 'B':1, 'C':0}, 126: {'A':2, 'B':1, 'C':0}, 127: {'A':2, 'B':1, 'C':0}, 128: {'A':2, 'B':1, 'C':0},
    129: {'A':0, 'B':1, 'C':2}, 130: {'A':2, 'B':1, 'C':0}, 131: {'A':0, 'B':1, 'C':2}, 132: {'A':2, 'B':1, 'C':0},
    133: {'A':0, 'B':1, 'C':2}, 134: {'A':2, 'B':1, 'C':0}, 135: {'A':2, 'B':1, 'C':0}, 136:{'A':0, 'B':1, 'C':2},
    137: {'A':2, 'B':1, 'C':0},138: {'A':0, 'B':1, 'C':2}, 139: {'A':0, 'B':1, 'C':2}, 140: {'A':0, 'B':1, 'C':2},
    141: {'A':2, 'B':1, 'C':0}, 142: {'A':2, 'B':1, 'C':0}, 143: {'A':2, 'B':1, 'C':0},144: {'A':0, 'B':1, 'C':2},
    145: {'A':2, 'B':1, 'C':0}, 146: {'A':0, 'B':1, 'C':2}, 147: {'A':0, 'B':1, 'C':2}, 148: {'A':2, 'B':1, 'C':0},

    149: {'A':2, 'B':1, 'C':0}, 150: {'A':2, 'B':1, 'C':0}, 151: {'A':0, 'B':1, 'C':2}, 152: {'A':2, 'B':1, 'C':0},
    153: {'A':0, 'B':1, 'C':2}, 154: {'A':0, 'B':1, 'C':2}, 155: {'A':2, 'B':1, 'C':0}, 156: {'A':0, 'B':1, 'C':2}, 157: {'A':2, 'B':1, 'C':0}, 158: {'A':0, 'B':1, 'C':2}, 159: {'A':2, 'B':1, 'C':0}, 160: {'A':2, 'B':1, 'C':0},
    161: {'A':0, 'B':1, 'C':2}, 162: {'A':2, 'B':1, 'C':0}, 163: {'A':2, 'B':1, 'C':0}, 164: {'A':2, 'B':1, 'C':0}, 165: {'A':2, 'B':1, 'C':0}, 166: {'A':0, 'B':1, 'C':2}, 167: {'A':0, 'B':1, 'C':2}, 168: {'A':2, 'B':1, 'C':0},
    169: {'A':0, 'B':1, 'C':2}, 170: {'A':0, 'B':1, 'C':2}, 171: {'A':1, 'B':0, 'C':0}, 172: {'A':0, 'B':0, 'C':1}, 173: {'A':1, 'B':0, 'C':0}, 174: {'A':1, 'B':0, 'C':0}, 175: {'A':0, 'B':0, 'C':1}, 176: {'A':1, 'B':0, 'C':0},
    177: {'A':0, 'B':1, 'C':0}, 178: {'A':0, 'B':0, 'C':1}, 179: {'A':0, 'B':0, 'C':1}, 180: {'A':0, 'B':0, 'C':1}, 181: {'A':0, 'B':1, 'C':0}, 182: {'A':0, 'B':1, 'C':0}, 183: {'A':0, 'B':1, 'C':0}, 184: {'A':0, 'B':1, 'C':0},
    185: {'A':0, 'B':1, 'C':0}}

    # Initialize the scores for each section
    section_scores = {
        'A': 0,
        'B': 0,
        'C': 0,
        'E': 0,
        'F': 0,
        'G': 0,
        'H': 0,
        'I': 0,
        'L': 0,
        'M': 0,
        'N': 0,
        'O': 0,
        'Q1': 0,
        'Q2': 0,
        'Q3': 0,
        'Q4': 0,

    }
   # To track marked answers
    marked_answers = {}
    
    # Visualize detection for debugging
    for question, bubbles in answer_bubbles.items():
        print(f"Processing Question {question} with bubbles {bubbles}")  # Debugging print
        marked_bubble_count = 0
        for i, (x, y) in enumerate(bubbles):
            # Draw rectangles on the image to visualize bubble positions
            cv2.circle(image, (x, y), 11, (255, 0, 0), 2)  # Blue circle with radius 20
            
            # Extract region of interest (ROI) for each bubble
            roi = thresh[y-20:y+20, x-20:x+20]  # Small region around the bubble
            
            # Check if the ROI is filled (marked)
            filled = cv2.countNonZero(roi)
            if filled > 500:  # Threshold for considering it marked
                marked_bubble_count += 1
                if marked_bubble_count > 1:  # Check for multiple marked bubbles
                    marked_answers[question] = None  # Award zero points if multiple marked
                    break  # No need to check further bubbles for this question
                else:
                    marked_answers[question] = chr(65 + i)  # 'A' is 65 in ASCII

                # cv2.putText(image, "Marked", (x - 40, y - 40), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                 # Display points for this choice
                points = answer_key[question].get(marked_answers[question], 0)
                cv2.putText(image, f"Points: {points}", (x - 40, y + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)

    # Calculate the score for each section
    for question, marked in marked_answers.items():
        if marked:
            points = answer_key[question].get(marked, 0)
            # Assign points to the correct section
            if question in [1, 31, 33, 63, 65, 96, 98, 127, 129, 159, 161]:  # Example: Questions 1 and 2 belong to Section 1
                section_scores['A'] += points

            elif question in [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185]:  # Example: Question 3 belongs to Section 2
                section_scores['B'] += points

            elif question in [2, 32, 35, 64, 67, 97, 128, 131, 160, 162]:  # Example: Question 4 belongs to Section 3
                section_scores['C'] += points

            elif question in [3, 36, 38, 66, 99, 102, 130, 132, 163, 165]:  # Example: Question 5 belongs to Section 4
                section_scores['E'] += points

            elif question in [4, 6, 37, 39, 68, 70, 100, 103, 134, 164]:  # Example: Question 6 belongs to Section 5
                section_scores['F'] += points

            elif question in [5, 7, 40, 69, 72, 104, 106, 133, 136, 166, 168]:  # Example: Question 7 belongs to Section 6
                section_scores['G'] += points

            elif question in [9, 41, 71, 73, 105, 107, 135, 137, 167, 169]:  # Example: Question 8 belongs to Section 7    
                section_scores['H'] += points

            elif question in [8, 10, 42, 44, 74, 77, 108, 110, 138, 140, 170]:  # Example: Question 9 belongs to Section 8
                section_scores['I'] += points

            elif question in [11, 13, 43, 45, 76, 78, 109, 112, 139, 141]:  # Example: Question 10 belongs to Section 9
                section_scores['L'] += points

            elif question in [12, 14, 17, 46, 49, 79, 81, 111, 114, 142, 145]:  # Example: Question 11 belongs to Section 10
                section_scores['M'] += points

            elif question in [15, 18, 47, 50, 80, 85, 113, 117, 143, 148]:  # Example: Question 12 belongs to Section 11
                section_scores['N'] += points
                
            elif question in [19, 21, 51, 54, 82, 87, 116, 119, 146, 150]:  # Example: Question 13 belongs to Section 12
                section_scores['O'] += points

            elif question in [20, 22, 24, 52, 53, 55, 83, 86, 88, 118, 120, 147, 149, 151]:  # Example: Question 14 belongs to Section 13
                section_scores['Q1'] += points

            elif question in [25, 27, 56, 59, 89, 92, 121, 123, 152, 156]:  # Example: Question 15 belongs to Section 14
                section_scores['Q2'] += points

            elif question in [26, 29, 57, 61, 90, 93, 122, 125, 154, 157]:  # Example: Question 16 belongs to Section 15
                section_scores['Q3'] += points

            elif question in [28, 30, 60, 62, 91, 94, 124, 126, 155, 158]:  # Example: Question 17 belongs to Section 16
                section_scores['Q4'] += points
            # Add more conditions for other sections if needed

    # Save the debug image with marked areas and correct answers
    cv2.imwrite('marked_answer_sheet_updated.png', image)  # Save updated image with marked answers
    
    return section_scores

@app.route('/process_omr_PF', methods=['POST'])
def process_omr():
    # Get the image URL from the incoming request
    image_url = request.json.get('image_url')
    
    # Get image data from URL (in memory, no saving to disk)
    img_data = requests.get(image_url).content
    image = np.asarray(bytearray(img_data), dtype=np.uint8)
    img = cv2.imdecode(image, cv2.IMREAD_COLOR)

    # Process the image to calculate the score
    score = omr_processing(img)

    # Return the score as a JSON response
    return jsonify({'score': score})

if __name__ == '__main__':
    app.run(debug=True, port=5001)